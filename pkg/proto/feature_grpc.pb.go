// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/feature.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureStateServiceClient is the client API for FeatureStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureStateServiceClient interface {
	SubscribeFeatureChanges(ctx context.Context, in *FeatureSubscription, opts ...grpc.CallOption) (FeatureStateService_SubscribeFeatureChangesClient, error)
}

type featureStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureStateServiceClient(cc grpc.ClientConnInterface) FeatureStateServiceClient {
	return &featureStateServiceClient{cc}
}

func (c *featureStateServiceClient) SubscribeFeatureChanges(ctx context.Context, in *FeatureSubscription, opts ...grpc.CallOption) (FeatureStateService_SubscribeFeatureChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureStateService_ServiceDesc.Streams[0], "/feature.FeatureStateService/SubscribeFeatureChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &featureStateServiceSubscribeFeatureChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureStateService_SubscribeFeatureChangesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type featureStateServiceSubscribeFeatureChangesClient struct {
	grpc.ClientStream
}

func (x *featureStateServiceSubscribeFeatureChangesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeatureStateServiceServer is the server API for FeatureStateService service.
// All implementations must embed UnimplementedFeatureStateServiceServer
// for forward compatibility
type FeatureStateServiceServer interface {
	SubscribeFeatureChanges(*FeatureSubscription, FeatureStateService_SubscribeFeatureChangesServer) error
	mustEmbedUnimplementedFeatureStateServiceServer()
}

// UnimplementedFeatureStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureStateServiceServer struct {
}

func (UnimplementedFeatureStateServiceServer) SubscribeFeatureChanges(*FeatureSubscription, FeatureStateService_SubscribeFeatureChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFeatureChanges not implemented")
}
func (UnimplementedFeatureStateServiceServer) mustEmbedUnimplementedFeatureStateServiceServer() {}

// UnsafeFeatureStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureStateServiceServer will
// result in compilation errors.
type UnsafeFeatureStateServiceServer interface {
	mustEmbedUnimplementedFeatureStateServiceServer()
}

func RegisterFeatureStateServiceServer(s grpc.ServiceRegistrar, srv FeatureStateServiceServer) {
	s.RegisterService(&FeatureStateService_ServiceDesc, srv)
}

func _FeatureStateService_SubscribeFeatureChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeatureSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureStateServiceServer).SubscribeFeatureChanges(m, &featureStateServiceSubscribeFeatureChangesServer{stream})
}

type FeatureStateService_SubscribeFeatureChangesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type featureStateServiceSubscribeFeatureChangesServer struct {
	grpc.ServerStream
}

func (x *featureStateServiceSubscribeFeatureChangesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

// FeatureStateService_ServiceDesc is the grpc.ServiceDesc for FeatureStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature.FeatureStateService",
	HandlerType: (*FeatureStateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeFeatureChanges",
			Handler:       _FeatureStateService_SubscribeFeatureChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/feature.proto",
}
