// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: pkg/proto/feature.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureStateService_SubscribeFeatureChanges_FullMethodName = "/feature.FeatureStateService/SubscribeFeatureChanges"
)

// FeatureStateServiceClient is the client API for FeatureStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for subscribing to toggle changes
type FeatureStateServiceClient interface {
	SubscribeFeatureChanges(ctx context.Context, in *FeatureSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeatureToggleChange], error)
}

type featureStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureStateServiceClient(cc grpc.ClientConnInterface) FeatureStateServiceClient {
	return &featureStateServiceClient{cc}
}

func (c *featureStateServiceClient) SubscribeFeatureChanges(ctx context.Context, in *FeatureSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeatureToggleChange], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureStateService_ServiceDesc.Streams[0], FeatureStateService_SubscribeFeatureChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FeatureSubscription, FeatureToggleChange]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureStateService_SubscribeFeatureChangesClient = grpc.ServerStreamingClient[FeatureToggleChange]

// FeatureStateServiceServer is the server API for FeatureStateService service.
// All implementations must embed UnimplementedFeatureStateServiceServer
// for forward compatibility.
//
// Service for subscribing to toggle changes
type FeatureStateServiceServer interface {
	SubscribeFeatureChanges(*FeatureSubscription, grpc.ServerStreamingServer[FeatureToggleChange]) error
	mustEmbedUnimplementedFeatureStateServiceServer()
}

// UnimplementedFeatureStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureStateServiceServer struct{}

func (UnimplementedFeatureStateServiceServer) SubscribeFeatureChanges(*FeatureSubscription, grpc.ServerStreamingServer[FeatureToggleChange]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFeatureChanges not implemented")
}
func (UnimplementedFeatureStateServiceServer) mustEmbedUnimplementedFeatureStateServiceServer() {}
func (UnimplementedFeatureStateServiceServer) testEmbeddedByValue()                             {}

// UnsafeFeatureStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureStateServiceServer will
// result in compilation errors.
type UnsafeFeatureStateServiceServer interface {
	mustEmbedUnimplementedFeatureStateServiceServer()
}

func RegisterFeatureStateServiceServer(s grpc.ServiceRegistrar, srv FeatureStateServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureStateService_ServiceDesc, srv)
}

func _FeatureStateService_SubscribeFeatureChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeatureSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureStateServiceServer).SubscribeFeatureChanges(m, &grpc.GenericServerStream[FeatureSubscription, FeatureToggleChange]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureStateService_SubscribeFeatureChangesServer = grpc.ServerStreamingServer[FeatureToggleChange]

// FeatureStateService_ServiceDesc is the grpc.ServiceDesc for FeatureStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature.FeatureStateService",
	HandlerType: (*FeatureStateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeFeatureChanges",
			Handler:       _FeatureStateService_SubscribeFeatureChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/feature.proto",
}
