// Code generated by MockGen. DO NOT EDIT.
// Source: internal/routes/routes.go
//
// Generated by this command:
//
//	mockgen -package mocks -source internal/routes/routes.go -destination internal/routes/mocks/routes.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/flohansen/dasher-server/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFeatureStore is a mock of FeatureStore interface.
type MockFeatureStore struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureStoreMockRecorder
}

// MockFeatureStoreMockRecorder is the mock recorder for MockFeatureStore.
type MockFeatureStoreMockRecorder struct {
	mock *MockFeatureStore
}

// NewMockFeatureStore creates a new mock instance.
func NewMockFeatureStore(ctrl *gomock.Controller) *MockFeatureStore {
	mock := &MockFeatureStore{ctrl: ctrl}
	mock.recorder = &MockFeatureStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureStore) EXPECT() *MockFeatureStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockFeatureStore) GetAll() ([]model.FeatureData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.FeatureData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFeatureStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFeatureStore)(nil).GetAll))
}
