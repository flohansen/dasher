// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: features.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteFeature = `-- name: DeleteFeature :exec
delete from features where feature_id = ?
`

func (q *Queries) DeleteFeature(ctx context.Context, featureID string) error {
	_, err := q.db.ExecContext(ctx, deleteFeature, featureID)
	return err
}

const getAllFeatures = `-- name: GetAllFeatures :many
select feature_id, description, enabled from features
`

func (q *Queries) GetAllFeatures(ctx context.Context) ([]Feature, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(&i.FeatureID, &i.Description, &i.Enabled); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeature = `-- name: UpsertFeature :exec
insert into features (feature_id, description, enabled)
values (?, ?, ?)
on conflict (feature_id) do update set
    description = excluded.description,
    enabled     = excluded.enabled
returning feature_id, description, enabled
`

type UpsertFeatureParams struct {
	FeatureID   string
	Description sql.NullString
	Enabled     sql.NullInt64
}

func (q *Queries) UpsertFeature(ctx context.Context, arg UpsertFeatureParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeature, arg.FeatureID, arg.Description, arg.Enabled)
	return err
}
