// Code generated by MockGen. DO NOT EDIT.
// Source: internal/notification/feature.go
//
// Generated by this command:
//
//	mockgen -package mocks -source internal/notification/feature.go -destination internal/notification/mocks/feature.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/flohansen/dasher-server/internal/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockFeatureStore is a mock of FeatureStore interface.
type MockFeatureStore struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureStoreMockRecorder
}

// MockFeatureStoreMockRecorder is the mock recorder for MockFeatureStore.
type MockFeatureStoreMockRecorder struct {
	mock *MockFeatureStore
}

// NewMockFeatureStore creates a new mock instance.
func NewMockFeatureStore(ctrl *gomock.Controller) *MockFeatureStore {
	mock := &MockFeatureStore{ctrl: ctrl}
	mock.recorder = &MockFeatureStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureStore) EXPECT() *MockFeatureStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockFeatureStore) GetAll(ctx context.Context) ([]sqlc.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]sqlc.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFeatureStoreMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFeatureStore)(nil).GetAll), ctx)
}
